#include <reg51.h>
#include <intrins.h>
#include <stdio.h>

#define unchar unsigned char 
#define unint unsigned int
#define Horizontal  64
#define Vertical 128

unchar Vop = 0x2a;

sbit A0 = P3^0;
sbit CS = P3^1;
sbit RW = P3^7;
sbit RES = P3^2;
sbit PSB = P3^5;
sbit C86 = P3^6;
sbit E = P3^4;

sbit AOUTOB = P2^1;
sbit STEP = P2^0;
sbit UP = P0^0;
sbit DOWN = P0^1;

void Write_Data (unchar dat);
void Write_Command (unchar dat);
void Inter_code ();
void Delay_ms (unint tt);
void Display (unchar dat1,unchar dat2);
void Test ();
//void Frame ();
void Displaychar (unchar *p);
void Pause ();

unchar code pic1[] = 
{
/* 长度*宽度 128 * 64 this pic size 1024 Bytes */ 
}

unchar code pic2[] =
{
/* 长度*宽度 128 * 64 this pic size 1024 Bytes */ 
}

unchar code pic3[]=
{
/* 长度*宽度 128*64 this pic size 1024 Bytes */
}

unchar code pic4[]=
{
/* 长度*宽度 128*64 this pic size 1024 Bytes */
}

void main ()
{
  RES = 1; //when /RES is set to "L",the register settings are initialized (cleared). The reset operation is performed by the /RES signal level.
  Delay_ms (10);
  RES = 0; //Reset all settings,clear all register
  Delay_ms (50);
  RES = 1;
  Delay_ms (100);
  
  C86 = 1; //C86 = "H"; 6800 series MPU interface. It is pull "L" set 8080 serise MPU interface.
  PSB = 1; //This pin configures the interface to be parallel or serial .PSB is "H".parallel data ,is "L" serial data .
  
  //P0=0X00;
  Inter_code ();
  while (1)
  {
    Test (0xff);
    Delay_ms (1000);
    Pause ();
    
    Test (0x00);
    Delay_MS (1000);
    Pause ();
    
    Display (0xaa,0x55);
    Delay_ms (1000);
    Pause ();
    
    Display (0xff,0x00);
    Delay_ms (1000);
    Pause ();
   
    Dispalay (0xaa,0xaa);
    Delay_ms (1000);
    Pause ();
    
    //Frame ();
    //Delay_ms ();
    //Pause ();
    
    Displaychar (pic1);
    Delay_ms (1000);
    Pause ();
    
    Displaychar (pic2);
    Delay_ms (1000);
    Pause ();
    
    Displaychar (pic3);
    Delay_ms (1000);
    Pause ();
    
    Displaychar (pic4);
    Delay_ms (1000);
    Pause ();    
  }
  }
}

/******************Ms Delay****************/
void Delay_ms (unint tt)
{
  unchar TT;
  while (--tt)
    for (TT=0;TT<100;TT++)
      ;
}

/******************Aout OR Step*************/
void Pause ()
{
  while (AOUTB==1 & STEP ==0)
    {
      if (UP == 1)
      {
        Delay_ms (1000);
        if (Vop <0x3f)
        {
          Write_Command (0x81);
          Write_Command (++Vop);
        }
      }
      if (DOWN == 1)
      {
        Delay_ms (1000);
        if (Vop > 0x00)
        {
          Write_Command (0x81);
          Write_Command (--Vop);
        }
      }
    }
    if (STEP == 1)
    {
      Delay_ms (10);
      while (AOUTOB == 0)
      ;
    }
    else if (AOUTOB == 1)
    {
    Delay_ms ();
    }
}

void Write_Command (unchar dat)
{
    A0 = 0;
    E = 1;
    RW = 0;
    CS = 0;
    P1 = dat;
    E = 0;
    CS = 1;
    RW = 1;
}

void Write_Data (unchar dat)
{
    A0 = 1;
    RW = 0;
    E = 1;
    CS = 0;
    P1 = dat;
    E = 0;
    CS = 1;
    RW = 1;
}

void Test (unchar dat)
{
    unint i,k;
    unchar page,column;
    page = 0xb0;
    k = horizontal/8;
    
    for (i=0; i<k; i++)
    {
        Write_Command (0x40);   //Display Start Line Set 
        Write_Command (page++);   //Page Address Set
        Write_Command (0x10);   //Column Address Set 
        Write_Command (0x00); //Status Read busy = '0' ;ADC = '0' ;Dispaly on ; Operating State
        
        for (column = 0; column<vertical; column++)
        {
            Write_Data (dat);
        }
    }
    Delay_ms (100);
}

void Display (unchar dat1,unchar dat2)
{
    unint i,j,k;
    unchar page,column;
    page = 0xb0;
    j = vertical / 2;
    k = horizontal / 8;
    for (i = 0;i <k ;i++)
    {
        Write_Command (0x40); //Display Start Line set
        Write_Command (page++);  //page address set
        Write_Command (0x10);   //column address set
        Write_Command (0x00);   //turn on dispaly
        
        for (column = 0;column <j; column ++)
        {
          Write_Data (dat1);
          Write_Data (dat2);
        }
    }
    Delay_ms (100);
}

void Displaychar (unchar *P)
{
    unint i,k;
    unchar page,col;
    page = 0xb0;
    k = horizontal/8;
    
    for (i=0; i<k; i++)
    {
        Write_Command (0x40);
        Write_Command (page++);
        Write_Command (0x10);
        Write_Command (0x00);
        
        for (col = 0;col <vertical ;col++)
        {
          Write_Data (*P++);
        }
    }
        Delay_ms (100);
}

void Inter_code ()
{
    Write_Command (0xe2);
    
    Write_Command (0xa2);
    Write_Command (0xa0);
    Write_Command (0xc0);
    
    Write_Command (0x25);
    Write_Command (0x81);
    Write_Command (Vop);
    
    Write_Command (0x2f);
    Write_Command (0xaf);
}
